%middleclick:script@dut sudo=true critical=false title=MiddleClickOnDUT
cat CLICK_CONF DPDK_CONF A_MID_BEGIN A_MID_IDS A_MID_NAT A_MID_LB A_MID_END B_MID_BEGIN B_MID_LB B_MID_NAT B_MID_IDS B_MID_END COMMON_IDS CLICK_END | click --dpdk -n 4 -l 0-$(( $CPU - 1 )) --

%variables
TCPCHECKSUM=true

%late_variables
aggcache=false
READONLY=true
wm_mask|wm_remove|wm_replace|wm_full:READONLY=false

MIDDLECLICK_BEFORE_STAT=
stats:MIDDLECLICK_BEFORE_STAT+= -> MidStat

-wm_full,http:MIDDLECLICKTCP+= -> HTTPIn(HTTP10 false, NOENC false, BUFFER 0)
wm_full,http:MIDDLECLICKTCP+= -> HTTPIn(HTTP10 false, NOENC false, BUFFER 65536)
wm_close:MIDDLECLICKTCP+= -> WordMatcher(WORD ATTACK, MODE CLOSE)
wm_mask:MIDDLECLICKTCP+= -> WordMatcher(WORD ATTACK, MODE MASK)
wm_alert:MIDDLECLICKTCP+= -> WordMatcher(WORD ATTACK, MODE ALERT, QUIET true)
wm_remove:MIDDLECLICKTCP+= -> WordMatcher(WORD ATTACK, MODE REMOVE)
wm_replace:MIDDLECLICKTCP+= -> WordMatcher(WORD ATTACK, MODE REPLACE)
wm_full:MIDDLECLICKTCP+= -> WordMatcher(WORD ATTACK, MODE FULL)
http:MIDDLECLICKTCP+= -> HTTPOut()

%file@dut A_MID_BEGIN

TSCClock(NOWAIT true);
JiffieClock(MINPRECISION 1000);

elementclass ARPDispatcher {
        input[0]->
		iparp :: FlowDispatcher(
                        12/0800,
                        12/0806,
                        -)
		iparp[0] -> [0]output
		iparp[1] -> arptype ::FlowDispatcher(20/0001, 20/0002, -)
		iparp[2] -> [3]output

		arptype[0] -> [1]output
		arptype[1] -> [2]output
		arptype[2] -> [3]output
}

tab :: ARPTable

elementclass Receiver { $port, $mac, $ip, $range |

    input[0]
    -> arpq :: ARPQuerier($ip, $mac, TABLE tab)
    -> etherOUT :: Null

    f :: FromDPDKDevice($port, VERBOSE $rxverbose, PROMISC false, RSS_AGGREGATE 1, THREADOFFSET 0, MAXTHREADS $CPU)
//    -> Print($port, -1)
    -> fc :: FlowClassifier(BUILDER 1, AGGCACHE $aggcache, CACHESIZE 65536, VERBOSE 1, EARLYDROP true)
//    -> Print("class $port", -1)
    -> arpr :: ARPDispatcher()

    arpr[0]
    -> FlowStrip(14)
    -> receivercheck :: CheckIPHeader(CHECKSUM false)
//    -> IPPrint("IP $ip")
    -> inc :: FlowDispatcher(9/01 0, 9/06 0, -)


    inc[0] //TCP or ICMP
    -> [0]output;


    inc[1]
    -> IPPrint("UNKNOWN IP")
    -> Unstrip(14)
	-> Discard

    arpr[1]
    -> Print("RX ARP Request $mac", -1)
    -> arpRespIN :: ARPResponder($range $mac)
    -> Print("TX ARP Responding", -1)
    -> etherOUT;

    arpRespIN[1] -> Print("ARP Packet not for $mac", -1) -> Discard

    arpr[2]
    -> Print("RX ARP Response $mac", -1)
    -> [1]arpq;

    arpr[3] -> Print("Unknown packet type IN???",-1) -> Discard();


    etherOUT
//    -> Print("OUT $mac",-1)
    -> t :: ToDPDKDevice($port,BLOCKING true,BURST $bout, ALLOC true, VERBOSE $txverbose, TCO true)
}


r1 :: Receiver(${dut:0:pci},$MAC1,$IP1,$IP1);
r2 :: Receiver(${dut:1:pci},$MAC2,$IP2,$IP2 $NATIP);
//Idle -> host :: Null;

r1

$MIDDLECLICK_BEFORE_STAT

%nat:file@dut A_MID_NAT
 -> nat::FlowIPNAT(SIP 10.221.0.2)

%-nat:file@dut A_MID_NAT

%lb:file@dut A_MID_LB
  -> lb :: FlowSimpleIPLoadBalancer($SERVERIP1,$SERVERIP2,$SERVERIP3,$SERVERIP4)

%-lb:file@dut A_MID_LB

%tcp:file@dut A_MID_IDS
 -> FlowDispatcher(- 0)
 -> up :: {
input[0]
 -> IPIn
 -> tIN :: TCPIn(FLOWDIRECTION 0, OUTNAME up/tOUT, RETURNNAME down/tIN, REORDER $inreorder)
$MIDDLECLICKTCPUP
$MIDDLECLICKTCP
 -> tOUT :: TCPOut(READONLY $READONLY, CHECKSUM $TCPCHECKSUM)
 -> tINRet :: SimpleTCPRetransmitter()
 -> IPOut(READONLY $READONLY)
 -> [0]output;
 tIN[1] -> [1]tINRet;
 tOUT[1] -> [1]output;
}

%-tcp:file@dut A_MID_IDS


%file@dut A_MID_END
 -> r2;

%file@dut B_MID_BEGIN
r2
// -> FlowDispatcher(9/06)


$MIDDLECLICK_BEFORE_STAT

%nat:file@dut B_MID_NAT
 -> FlowIPNATReverse(NAT nat)
%-nat:file@dut B_MID_NAT

%lb:file@dut B_MID_LB
 -> FlowSimpleIPLoadBalancerReverse(IP 10.221.0.5)

%-lb:file@dut B_MID_LB

%tcp:file@dut B_MID_IDS
 -> FlowDispatcher(- 0)
 -> down :: {
input[0]
 -> IPIn
 -> tIN :: TCPIn(FLOWDIRECTION 1, OUTNAME down/tOUT, RETURNNAME up/tIN, REORDER $inreorder)
$MIDDLECLICKTCPDOWN
$MIDDLECLICKTCP
 -> tOUT :: TCPOut(READONLY $READONLY, CHECKSUM $TCPCHECKSUM)
 -> tRet :: SimpleTCPRetransmitter()
 -> IPOut(READONLY $READONLY)
 -> [0]output;
 tIN[1] -> [1]tRet;
 tOUT[1] -> [1]output;
}

%-tcp:file@dut B_MID_IDS


%file@dut B_MID_END
 -> r1;

/*back :: PaintSwitch()
back[0] -> r1
back[1] -> r2

host
    ~> Print("ICMP")
    -> icmptype :: FlowDispatcher(9/01 20/08, -)
    -> ICMPPingResponder
    -> back;*/

%-tcp:file@dut COMMON_IDS
%tcp:file@dut COMMON_IDS
up[1] -> r1;
down[1] -> r2;

%file@dut CLICK_END
//    icmptype[1] -> Print("Unhandled ICMP", -1) -> Discard;

//#############################
Script(TYPE ACTIVE,
                print "Waiting for link initialization...",
                wait 2s,
                print "Ready")

DriverManager(
                pause,
                print "Server finished. Waiting for last packets...",
                wait $(wait),
                print "Rate : ",
                print "$(r1/avgIN.link_rate)",
                print "$(r2/avgIN.link_rate)",
                print "Count :",
                print "$(r1/avgIN.count)/$(r1/f.count)",
                print "$(r2/avgIN.count)/$(r2/f.count)",
                print "Dropped : ",
                print "$(r1/f.dropped) $(r1/t.dropped)",
                print "$(r2/f.dropped) $(r2/t.dropped)",
                print "$(r1/arpq.drops) $(r2/arpq.drops)",
                print "$(r1/stats.average) $(r1/stats.median)",
                print "$(r2/stats.average) $(r2/stats.median)",
                stop);
