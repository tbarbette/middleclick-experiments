%click,-fastclick,-middleclick:script@dut sudo=true critical=true title=MiddleClickOnDUT
ifconfig ${dut:0:ifname} up
ifconfig ${dut:1:ifname} up
cat CLICK_CONF VANILLA_CONF CLICK_END | click -a -j $CPU

%file@dut VANILLA_CONF
elementclass ARPDispatcher {
    input[0]->Classifier(12/0800,12/0806 20/0001, 12/0806 20/0002,-)[0,1,2,3]=>[0,1,2,3]output
}
tab :: ARPTable

elementclass Receiver { $port, $mac, $ip, $range |

    input[0]
    -> arpq :: ARPQuerier($ip, $mac, TABLE tab)
    -> etherOUT :: Null

    f :: FromDevice($port, METHOD PCAP, SNIFFER false)
    -> arpr :: ARPDispatcher()

    arpr[0]
    -> Strip(14)
    -> receivercheck :: CheckIPHeader(CHECKSUM false)
    -> inc :: Classifier(9/01,
                         9/06, -)


    inc[0] //TCP or ICMP
    -> [0]output;
    inc[1] //TCP or ICMP
    -> [0]output;

    inc[2]
    -> IPPrint("UNKNOWN IP")
    -> Unstrip(14)
	-> Discard

    arpr[1]
    -> Print("RX ARP Request $mac", -1)
    -> arpRespIN :: ARPResponder($range $mac)
    -> Print("TX ARP Responding", -1)
    -> etherOUT;

    arpRespIN[1] -> Print("ARP Packet not for $mac", -1) -> Discard

    arpr[2]
    -> Print("RX ARP Response $mac", -1)
    -> [1]arpq;

    arpr[3] -> Print("Unknown packet type IN???",-1) -> Discard();


    etherOUT
//    -> Print("OUT $mac",-1)
    -> t ::Queue -> ToDevice($port, METHOD PCAP)
}


r1 :: Receiver(${dut:0:ifname},$MAC1,$IP1,$IP1);
r2 :: Receiver(${dut:1:ifname},$MAC2,$IP2,$IP2 $NATIP);

r1 -> r2;
r2 -> r1;
