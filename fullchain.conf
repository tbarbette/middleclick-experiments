
# Testie configuraton
#####################
%info
40G Chain supporting various tests

The DUT needs two 40G interfaces, one facing WAN and the other LAN.

%config
timeout=200
leaveopen:timeout=-1
var_names={LENGTH:Length,result-THROUGHPUT:HTTP Goodput,TXCPU:Transmit CPU,RXCPU:Receive CPU,CPUFREQ:CPU frequency (MHz),C:Concurrent connections,BUILDER:Reconstruct batches of Flows,result-LATENCY:Average file download time,LAT99:1% tail latency of file donwload time,result-Receive rate:Receive rate,FSIZE:File size,NC:Number of cores,result-REQUEST:Requests rate (req/sec),CPU:Number of cores,serie: ,result-Perf:Percentage of CPU time spent,Perf:Function class,version: ,result-LINK:Throughput,GEN_RATE:Target request generation rate (req/sec),FRAMEWORK: }
n_retry=0
acceptable=0.01
n_runs=3
accept_zero={DROPPED,LINK,PPS}
nolat:accept_zero+={LATENCY,LAT99}
tunemiddle|cdflat:n_runs=1

var_serie=LENGTH
-cpu:var_log={FSIZE,result-LATENCY,LAT99,result-Receive rate,time,GEN_RATE,REQUEST}
//-cpu:var_log_base={result-THROUGHPUT:10}
var_unit={result: ,result-LATENCY:ms,LAT99:ms,FSIZE:kByte,result-THROUGHPUT:Gbits/s,result-LINK:Gbits/s,result-PPS:KPackets/s,REQUEST:Request/s,Perf:%,CPUFREQ:MHz}
var_divider={result-THROUGHPUT:125000000,result-LINK:1000000000,result-LATENCY:0.001,LAT99:0.001,result-PPS:1000,CPUFREQ:1000} //Throughput is brought back to bits
var_format={result:%d,result-LATENCY:%d,LAT99:%d}
var_format+={result-CDFLAT:%.1f}
var_grid={LATENCY,THROUGHPUT,CDFLAT,LAT99}
-motivation:var_grid+={REQUEST}
var_grid+={THROUGHPUT}
-wrkrate:var_lim={result-PPS:0-1000,THROUGHPUT:0-40,LINK:0-40,result-REQUEST:0-1000000}
var_lim+={CDFLAT:0-1}
var_ticks={THROUGHPUT:0+5+10+15+20+25+30+35+40,CPU:1+2+3+4}
graph_lines={-}

//graph_result_as_variables={LINK+THROUGHPUT:Receive rate}
//graph_variable_as_series={Receive rate}
//graph_combine_results={LINK+THROUGHPUT:Link rate+Payload rate}
duallat:graph_subplot_result+={THROUGHPUT+LATENCY:2}
duallat:graph_subplot_type=axis
perf:var_serie=Perf
perf:graph_series_as_variables=True
perf:graph_result_as_variable={PERF-(.*):Perf}
perf,motivation:graph_series_sort={5,6,0,9,1,2,3,4,8,7,10,11}
perf:graph_max_series=15
perf:graph_bar_stack=True
perf:graph_x_sort={serie:0}
perf,motivation:graph_color={4,4,2,2,1,1,1,1,5,5,5,5}
perf:graph_legend_ncol=4
perf:legend_loc=outer center
perf:legend_bbox={0,1,1,.18}

-perf:results_expect={THROUGHPUT,LINK}

//Paper design

//Motivation experiment
motivation:var_lim+={THROUGHPUT:0-20,result-REQUEST:1000-500000}
motivation:var_ticks+={THROUGHPUT:0+5+10+15+20,REQUEST:1000+10000+1000000+200000}
motivation:var_log_base+={REQUEST:10}
motivation,-perf:graph_show_values={1,0}
motivation,-perf:graph_color={1,1,1,1,1,3,3,3,3,3}
motivation,-perf:graph_subplot_result={THROUGHPUT+REQUEST:rate}
motivation:graph_subplot_type=axis

//Load balancer
var_names+={CDFLAT:CDF,time:Latency (Âµs)}
evaluation,-schain:var_ticks+={THROUGHPUT:0+20+40+60}
cdflat:var_log={LATENCY,time}
cdflat:var_lim+={CDFLAT:0-1}
cdflat,8k:var_lim+={time:0-16}
cdflat,128k:var_lim+={time:10-}
cdflat,256k:var_lim+={time:100-4000000}
cdflat,1024k:var_lim+={time:1000-10000}
cdflat:var_format+={result-CDFLAT:%.1f}
cdflat,8k:var_ticks+={time:0.5+1+1.5+2+4+8+16}
cdflat,128k:var_ticks+={time:10+100+1000+1000000}
cdflat,256k:var_ticks+={time:1000+2000+4000+8000+64000+256000+2048000}
//cdflat,1024k:var_ticks+={time:  }
cdflat:var_grid+={CDFLAT}
cdflat:var_repeat={CDFLAT}
cdflat:time_precision=3
cdflat:time_sync=0
cdflat:result_add=0
cdflat:graph_legend=False
cdflat:graph_error={CDFLAT:none}
cdflat:graph_markers={ }
cdflat:accept_zero={time,CDFLAT}

//Schain
var_repeat={CDFLAT}
-cdflat:time_precision=1
-cdflat:time_sync=0
//For throughput:
-cdflat:result_add=1
graph_error={CDFLAT:none}
//schain,wrkrate:graph_markers={ }
accept_zero+={time,CDFLAT}
graph_y_group={time:first}
schain:var_lim+={THROUGHPUT:0-45}
schain,noka:var_lim+={THROUGHPUT:0-18}
schain,noka:var_ticks+={THROUGHPUT:0+2+4+6+8+10+12+14+16+18}
schain:graph_color={8,4,4,1,1,3,3,5,5,5,5,7}

schain:legend_loc=outer center
schain:legend_ncol=3
schain:legend_bbox={0,1,1,.17}
//schain,wrkrate:var_lim+={result-REQUEST:8000-2048000}

//Context
context:var_lim+={THROUGHPUT:0-20}
context:graph_x_sort=0
context:var_serie=FRAMEWORK
context:graph_series_as_variables=1
context:graph_type=bar



%variables
middleclick,fulllb|middleclick,nat:LBSTATE=0
FSIZE=[0*262144]
//FSIZE=[0*1048576]
//FSIZE=[0*65536]
CPU=1
cpu:CPU=[1-4]
CPUFREQ=
cpufreq:CPUFREQ=1200000
allcpufreq:CPUFREQ=[1000000-3700000#200000]

KEEPALIVE=0

SERVER_CPU=16
SERVER_CHANNELS=16
GEN_CONCURRENT=2048
tune:GEN_CONCURRENT={128,256,512,1024}
GEN_THREADS?=36
GEN_PROCESS?=1
GEN_PROCBIND?=0
GEN_LINGER?=-1

genmp:GEN_CONCURRENT=4096
genmp:GEN_THREADS=36
genmp:GEN_PROCESS=4
genmp:GEN_PROCBIND=1
linger:GEN_LINGER=5

SERVER=nginx
noserver:SERVER=unknown


context:FRAMEWORK=MiddleClick
context,mos:FRAMEWORK=mOS
context,nginxlb:FRAMEWORK=NGINX
context,snort:FRAMEWORK=Snort

middleclick:ALL=true
middleclick:TCPCHECKSUM=false //Done by hardware
middleclick,hw:HARDWARE=1
middleclick,-aggcache:AGGCACHE=0
middleclick,aggcache:AGGCACHE=1
middleclick:CACHESIZE=65536
//tunemiddle:AGGCACHE={0,1} //Now a tag
//tunemiddle:CACHESIZE={1024,32768,65536}
//tunemiddle:BUILDER={0,1} //Now a tag
tunemiddle:FSIZE={8,32,1024}
middleclick,session:MIDDLECLICK_BEFORE_STAT+=-> FlowDispatcher(9/06 12/0/ffffffff 16/0/ffffffff 20/0/ffff 22/0/ffff)
middleclick,tcpstate:MIDDLECLICK_BEFORE_UP+=-> tcpstatein_up :: TCPStateIN(RETURNNAME tcpstatein_down)
middleclick,tcpstate:MIDDLECLICK_AFTERNAT_DOWN+=-> tcpstatein_down :: TCPStateIN(RETURNNAME tcpstatein_up)

SOMAXCONN=1200000
haproxy:MAXCONN=200000
haproxy:BALANCE=static-rr
haproxy:SOMAXCONN=200000
haproxy:SYNBACKLOG=200000
tunehaproxy:MAXCONN={1024,32768,200000,4000000}
tunehaproxy:SOMAXCONN={200000,400000}
tunehaproxy:BALANCE={roundrobin,static-rr}
tunehaproxy:FSIZE={8,32,1024}


wrkrate:GEN_RATE=[8000*1024000]
//wrkrate:GEN_RATE=1024000
wrkrate:FSIZE=8

FNT=FWD
nat:FNT=NAT
haproxy|lb:FNT=LB
haproxy,nat|lb,nat:FNT=NAT+LB
snort,-context|ids,-context:FNT=IPS

//-nat:NAT=FORWARD
//nat:NAT=LINUX
//nat,mos:NAT=MOS
//nat,middleclick:NAT=MIDDLECLICK
//ids,middleclick:IDS=MIDDLECLICK
//snort:IDS=SNORT

//wm:WMPOS={1000:First packet,1400:Inter-packet,2000:Second packet}
wm:WMPOS={1000:First packet}
//wm:WMPOS={1400:Inter-packet}
-wm:WMPOS={-1:None}

perf:PERF=1
perf:PERF_STACK_MAX=3
perf:PERF_CLASS_MAP=../libs/perf/kernel.map ../libs/perf/kernel_flow.map ../libs/perf/fastclick.map ../libs/perf/middleclick.map
perf:PERF_MIN=0.1
perf:PERF_OPT=--cpu 0

%late_variables
NGINX_NWORKER=EXPAND( $SERVER_CPU )
FILE_PATH?=EXPAND(bin-${FSIZE}K)
HTTP_PORT?=80
GEN_TIME?=20
inreorder=false
crc|ids|http:inreorder=true
NGINX_ROOT=/tmp/nginx/
NGINX_PORT=80
perf:GEN_TIME=20
perf:PERF_CPU?=EXPAND( $CPU )
perf:PERF_OPT?=EXPAND( --cpu 0-$(( $PERF_CPU - 1 )) )
perf:PERF_TIME=10
PERF_MIN=0.05
MIDDLECLICKTCP=
MIDDLECLICKTCPUP=
MIDDLECLICKTCPDOWN=
ids,middleclick:MIDDLECLICKTCP= -> WordMatcher(WORD attack)
middleclick,tnat:MIDDLECLICKTCPUP+= -> nat::FlowIPNAT(SIP $SIP1)
middleclick,tnat:MIDDLECLICKTCPDOWN+= -> nat::FlowIPNATReverse(up/nat)
middleclick,fc:MIDDLECLICKTCPUP+= -> fc::FlowCounter()
middleclick,fc:MIDDLECLICKTCPDOWN+= -> fc::FlowCounter()
middleclick,crc:MIDDLECLICKTCPUP+= -> fcrc::FlowCRC()
middleclick,crc:MIDDLECLICKTCPDOWN+= -> fcrc::FlowCRC()


WRK_HOST?=10.221.0.5
haproxy|nginxlb|fulllb:WRK_HOST=10.220.0.1

pipeline:HACPUOFFSET=1
pipeline:SNORTCPUOFFSET=2
pipeline:SQUIDCPUOFFSET=3



//ids,middleclick:MIDDLECLICKTCP= -> FlowIDSMatcher(attack, STALL false)

//*********DUT*************
%late_variables
N=EXPAND( $(( $CPU )) )

%-dpdk,-mos,-nobind:import@dut dpdk-bind DRIVER=i40e NIC=0
%-dpdk,-mos,-nobind:import@dut dpdk-bind DRIVER=i40e NIC=1
%-dpdk,-mos:import@dut dev_channels NIC=0 delay=1
%-dpdk,-mos:import@dut dev_channels NIC=1 delay=1
%-noaff,-dpdk,-mos:import@dut dev_irq_affinity NIC=0 delay=2
%-noaff,-dpdk,-mos:import@dut dev_irq_affinity NIC=1 delay=2
%noaff,-dpdk,-mos:script@dut sudo=true autokill=false
service irqbalance start

%dpdk,-nobind:import@dut dpdk-bind NIC=0
%dpdk,-nobind:import@dut dpdk-bind NIC=1
%import@client dev_rate NIC=0 delay=5
%import@dut cpufreq-script
%perf:import@dut perf-class delay=8 waitfor=NGINX_LAUNCHED



%-noserver:script@server autokill=false sudo=true
service irqbalance stop
ethtool -L ${server:0:ifname} combined $SERVER_CHANNELS
set_irq_affinity.sh ${server:0:ifname}

%script@client autokill=false sudo=true
service irqbalance stop
ethtool -L ${client:0:ifname} combined $GEN_THREADS
set_irq_affinity.sh ${client:0:ifname}

//Just set the IPS, for all mode
%script@dut 0:ip=10.220.0.1 1:ip=10.221.0.1 autokill=false name=setips

%-dpdk,-mos:script@dut sudo=true autokill=false name=flushconntrack
conntrack -F
iptables -P INPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -P OUTPUT ACCEPT
iptables -t filter -F
iptables -t raw -F
iptables -t nat -F
iptables -t mangle -F
conntrack -F
rmmod iptable_nat nf_nat_ipv4 xt_REDIRECT nf_nat_redirect xt_nat nf_nat nf_conntrack_ipv4

ethtool -L ${self:0:ifname} combined $CPU
ethtool -L ${self:1:ifname} combined $CPU

echo 1 > /proc/sys/net/ipv4/ip_forward

ifconfig ${self:0:ifname} ${self:0:ip} netmask 255.255.255.0
ifconfig ${self:0:ifname} up
ifconfig ${self:1:ifname} ${self:1:ip} netmask 255.255.255.0
ifconfig ${self:1:ifname} up

sudo arp -s 10.221.0.5 ${server:0:mac}
exit 0

%-fastclick,-click,nat,-mos:script@dut sudo=true delay=2 autokill=false name=LinuxNAT
iptables -t nat -A POSTROUTING -o ${dut:1:ifname} -j SNAT --to ${dut:1:ip}
exit $?

%-fastclick,-click,forward:script@dut sudo=true delay=1 autokill=false name=removeconntrack
iptables -t raw -I OUTPUT -j NOTRACK
iptables -t raw -I PREROUTING -j NOTRACK
conntrack -F
rmmod iptable_nat nf_nat_ipv4 xt_REDIRECT nf_nat_redirect xt_nat nf_nat nf_conntrack_ipv4

exit 0

//***********CLIENT***************
%-nobind:import@client dpdk-bind DRIVER=i40e NIC=0 0:ip=10.220.0.5

%-direct:script@client sudo=true delay=2 name=clientsetup autokill=false 0:ip=10.220.0.5
INETH=${client:0:ifname}
ifconfig $INETH down
ifconfig $INETH ${client:0:ip} netmask 255.255.255.0
ifconfig $INETH up
ip route add 10.221.0.0/24 via 10.220.0.1

//Performance of client
echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse
sysctl -w net.core.somaxconn=$SOMAXCONN
sysctl -w net.ipv4.tcp_max_syn_backlog=200000
sysctl -w net.ipv4.tcp_fin_timeout=0

//sudo arp -s 10.221.0.5 ${server:0:mac}
//sudo iptables -P INPUT ACCEPT
exit 0

%-mos,direct:script@client sudo=true delay=2 name=clientsetup autokill=false
INETH=${client:0:ifname}
sudo ifconfig $INETH 10.221.0.50 netmask 255.255.255.0
sudo ifconfig $INETH up
exit 0

//Server

%import@server waitcon

%-leaveopen,wrkrate:import@client wrk2 HTTP_PORT=80 delay=8 waitfor=NGINX_LAUNCHED
%-wrkrate,-leaveopen:script@client sudo=true delay=8 name=wrk deps=wrk-tbarbette waitfor=NGINX_LAUNCHED
echo "Launching WRK script"
export PATH=../build/wrk/:$PATH
bash wrk.sh

%file@client wrk.sh
killall wrk
sleep 1
killall -9 wrk
threads_per_proc=$(echo "$GEN_THREADS / $GEN_PROCESS" | bc)
concurrent_per_proc=$(echo "$GEN_CONCURRENT / $GEN_PROCESS" | bc)
linger=$GEN_LINGER

for i in $(seq ${GEN_PROCESS}) ; do
{

        if [ "$GEN_PROCBIND" == "1" ] ; then
            addr=10.220.0.$( echo "5 + $i" | bc )
            ip addr add $addr/32 dev ${client:0:ifname}
        else
            addr=10.220.0.5
        fi
        aff=$(echo "($i - 1) * $threads_per_proc" | bc)
        echo "wrk -c $concurrent_per_proc -l $linger -t $threads_per_proc -r -d2s -a $aff -b $addr http://${WRK_HOST}:${HTTP_PORT}/${FILE_PATH}"
        wrk -c $concurrent_per_proc -l $linger -t $threads_per_proc -r -d2s -a $aff -b $addr http://${WRK_HOST}:${HTTP_PORT}/${FILE_PATH}
        echo "Launching WRK $i"
        wrk -c $concurrent_per_proc -l $linger -t $threads_per_proc -r -d${GEN_TIME}s -a $aff -b $addr http://${WRK_HOST}:${HTTP_PORT}/${FILE_PATH} | tee wrk_results$i
        r=$?
    } &
done
echo "Waiting for instances to finish..."
wait

for i in $(seq ${GEN_PROCESS}) ; do
    cat wrk_results$i | grep "Transfer/sec" | awk '{printf "RESULT-THROUGHPUT %s\n", $2}'
    cat wrk_results$i | grep "Requests/sec" | awk '{printf "RESULT-REQUEST %s\n", $2}'
    cat wrk_results$i | grep "Latency" | awk '{printf "RESULT-LATENCY %s\n", $2}'
    rm wrk_results$i
done
exit $r

//************SERVER***************

%-nobind,epserver:import@server mos-bind
%epserver:script@server sudo=true
killall nginx
ifconfig ${self:0:ifname} 10.221.0.5 netmask 255.255.0.0
ip route add 10.220.0.0/16 dev ${self:0:ifname}
arp -s ${dut:1:ip} ${dut:1:mac}
arp -s ${client:0:ip} ${dut:1:mac}
cd /home/tom/nas/mOS-networking-stack-14/
cd samples/epserver
./epserver

%-noserver,-nobind,-epserver:import@server dpdk-bind DRIVER=i40e NIC=0
%-epserver,-noserver:script@server 0:ip=10.221.0.5 sudo=true autokill=false
ifconfig ${server:0:ifname} ${server:0:ip} netmask 255.255.255.0
ip route add 10.220.0.0/24 via 10.221.0.1

//Performance of server
echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse
sysctl -w net.core.somaxconn=$SOMAXCONN
sysctl -w net.ipv4.tcp_max_syn_backlog=200000
sysctl -w net.ipv4.tcp_fin_timeout=0

//iptables -P INPUT ACCEPT
//For LB
ip addr add 10.221.0.6 dev ${self:0:ifname}
ip addr add 10.221.0.7 dev ${self:0:ifname}
ip addr add 10.221.0.8 dev ${self:0:ifname}
ip addr add 10.221.0.9 dev ${self:0:ifname}
exit 0

%-epserver,-iperf,-noserver:import@server nginx waitfor=SERVER_CLEAN

%noserver:script@server autokill=false waitfor=SERVER_CLEAN
echo "EVENT NGINX_LAUNCHED"

%script@server autokill=false critical=1
mkdir -p ${NGINX_ROOT}
dd if=/dev/urandom of=${NGINX_ROOT}/bin-${FSIZE}K bs=1K count=$FSIZE

%wm:script@server autokill=false delay=1
echo ATTACK | dd if=/dev/stdin of=${NGINX_ROOT}/bin-${FSIZE}K bs=1 seek=$WMPOS conv=notrunc
cat ${NGINX_ROOT}/bin-${FSIZE}K | grep ATTACK

//********Config files**********
%include fullchain.d/mos.conf
%include fullchain.d/clicknf.conf
%include fullchain.d/snort.conf
%include fullchain.d/squid.conf
%include fullchain.d/middleclick.conf
%include fullchain.d/fastclick.conf
%include fullchain.d/click.conf
%include fullchain.d/nginx.conf
%include fullchain.d/haproxy.conf

%file@dut CLICK_CONF
define($MAC1 ${dut:0:mac})
define($MAC2 ${dut:1:mac})
define($NET1 10.220.0.0/16)
define($NET2 10.221.0.0/16)
define($IP1 ${dut:0:ip})
define($IP2 ${dut:1:ip})
define($NATIP 10.221.0.2)

define($SERVERIP1 10.221.0.6)
define($SERVERIP2 10.221.0.7)
define($SERVERIP3 10.221.0.8)
define($SERVERIP4 10.221.0.9)


define($SIP1 10.221.0.1)
define($SIP2 10.221.0.2)
define($SIP3 10.221.0.3)
define($SIP4 10.221.0.4)

//Parameters
define($rxverbose 99)
define($txverbose 99)
define($bout 32)
define($ignore 0)

Script(TYPE ACTIVE,
        label loop,
        read info.pool_count,
        wait 1s,
        goto loop)

%file@dut DPDK_CONF
info :: DPDKInfo(1000000)


//#############################
%haproxy|nginxlb:init@dut sudo=true
sudo sysctl -w net.core.somaxconn=$SOMAXCONN
sudo sysctl -w net.ipv4.tcp_max_syn_backlog=$SYNBACKLOG

sudo service fail2ban stop

sudo killall -9 haproxy &> /dev/null
sudo killall -9 nginx &> /dev/null

RXQUEUE=$NC
ethA=${dut:0:ifname}
ethB=${dut:1:ifname}

echo 1 > /proc/sys/net/ipv4/ip_forward
sleep 1

//sudo ip addr add 10.100.1.2/24 dev $ethB
//sudo ip addr add 10.100.2.2/24 dev $ethB
//sudo ip addr add 10.100.3.2/24 dev $ethB
//sudo ip addr add 10.100.4.2/24 dev $ethB
//sudo ip addr add 10.100.5.2/24 dev $ethB
//sudo ip addr add 10.100.6.2/24 dev $ethB
//sudo ip addr add 10.100.7.2/24 dev $ethB
//sudo ip addr add 10.100.8.2/24 dev $ethB
