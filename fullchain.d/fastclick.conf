%fastclick,-dpdk:require
echo "FastClick requires DPDK!"
exit 1

%fastclick:script@dut sudo=true critical=true title=MiddleClickOnDUT
cat CLICK_CONF FAST_CONF A_FAST_BEGIN A_FAST_LB_MT A_FAST_NAT_MT A_FAST_STATS A_FAST_END B_FAST_BEGIN B_FAST_NAT_MT B_FAST_LB_MT  B_FAST_STATS B_FAST_END  CLICK_END | click --dpdk -n 4 -l 0-$(( $CPU - 1 )) --

%file@dut FAST_CONF
elementclass ARPDispatcher {
    input[0]->Classifier(12/0800,12/0806 20/0001, 12/0806 20/0002,-)[0,1,2,3]=>[0,1,2,3]output
}
tab :: ARPTable

elementclass Receiver { $port, $mac, $ip, $range |

    input[0]
    -> arpq :: ARPQuerier($ip, $mac, TABLE tab)
    -> etherOUT :: Null

    f :: FromDPDKDevice($port, VERBOSE $rxverbose, PROMISC false, MAXTHREADS $CPU, SCALE parallel)
    -> arpr :: ARPDispatcher()

    arpr[0]
    -> Strip(14)
    -> receivercheck :: CheckIPHeader(CHECKSUM false)
    -> inc :: Classifier(9/01,
                         9/06, -)


    inc[0] //TCP or ICMP
    -> [0]output;
    inc[1] //TCP or ICMP
    -> [0]output;

    inc[2]
    -> IPPrint("UNKNOWN IP")
    -> Unstrip(14)
	-> Discard

    arpr[1]
    -> Print("RX ARP Request $mac", -1)
    -> arpRespIN :: ARPResponder($range $mac)
    -> Print("TX ARP Responding", -1)
    -> etherOUT;

    arpRespIN[1] -> Print("ARP Packet not for $mac", -1) -> Discard

    arpr[2]
    -> Print("RX ARP Response $mac", -1)
    -> [1]arpq;

    arpr[3] -> Print("Unknown packet type IN???",-1) -> Discard();


    etherOUT
//    -> Print("OUT $mac",-1)
    -> t :: ToDPDKDevice($port,BLOCKING true,BURST $bout, VERBOSE $txverbose)
}


r1 :: Receiver(${dut:0:pci},$MAC1,$IP1,$IP1);
r2 :: Receiver(${dut:1:pci},$MAC2,$IP2,$IP2 $NATIP 10.221.0.3 10.221.0.4 );

%file@dut A_FAST_BEGIN
r1

%nat:file@dut A_FAST_NAT_MT
 -> CPUSwitch [0-3] => [0-3] nat :: IPRewriter(
        pattern 10.221.0.1 1024-65535 - - 0 1,
        pattern 10.221.0.2 1024-65535 - - 0 1,
        pattern 10.221.0.3 1024-65535 - - 0 1,
        pattern 10.221.0.4 1024-65535 - - 0 1
    )
//-> SpinlockAcquire(natlock) -> nat :: IPRewriter(pattern ${dut:1:ip} 1024-65535 - - 0 1) -> SpinlockRelease(natlock)

%natst:file@dut A_FAST_NAT
 -> nat :: IPRewriter(
        pattern ${dut:1:ip} 1024-16383 - - 0 1)


%stats:file@dut A_FAST_STATS
-> SetTimestamp(PER_BATCH true)
 -> CPUSwitch[0-3] => [0-3] {
     [0] -> AggregateIPFlows -> [0];
     [1] -> AggregateIPFlows -> [0];
     [2] -> AggregateIPFlows -> [0];
     [3] -> AggregateIPFlows -> [0];
 }
// -> AggregateIPFlows
//-> SpinlockAcquire(aglockA) -> AggregateIPFlows -> SpinlockRelease(aglockA)

%-nat:file@dut A_FAST_NAT

%file@dut A_FAST_END
-> r2;

%file@dut B_FAST_BEGIN
r2

%nat:file@dut B_FAST_NAT_MT
-> disp :: { -> ipc :: IPClassifier(dst 10.221.0.1,
                dst 10.221.0.2,
                dst 10.221.0.3,
                dst 10.221.0.4,
                -);
    ipc[0] -> p0 :: Pipeliner -> [0]output;
    ipc[1] -> p1 :: Pipeliner -> [1]output;
    ipc[2] -> p2 :: Pipeliner -> [2]output;
    ipc[3] -> p3 :: Pipeliner -> [3]output;
    ipc[4] -> Print(ERROR) -> Discard;
    StaticThreadSched(p0 0);
    StaticThreadSched(p1 1);
    StaticThreadSched(p2 2);
    StaticThreadSched(p3 3);
} => [0-3]nat[1]
//-> SpinlockAcquire(natlock) -> [0]nat[1] SpinlockRelease(natlock)

%lbsp:file@dut FAST_LB
    // RR load balancing OLD version, does not work with backward path
    lb :: RoundRobinIPMapper(
        - - 10.221.0.5 - 0 0,
        - - 10.221.0.6 - 0 0,
        - - 10.221.0.7 - 0 0,
        - - 10.221.0.8 - 0 0,
    );

    // Implements LB with flow monitoring
    lbRewriter :: IPRewriter(
        lb,               
        SET_AGGREGATE false
    );

%lb:file@dut A_FAST_LB_MT
 -> CPUSwitch [0-3] => [0-3] lb :: IPRewriter(
        pattern - - 10.221.0.5 - 0 1,
        pattern - - 10.221.0.6 - 0 1,
        pattern - - 10.221.0.7 - 0 1,
        pattern - - 10.221.0.8 - 0 1
    )[0]

%lb:file@dut B_FAST_LB_MT
-> displb :: { -> ipc :: IPClassifier(src 10.221.0.5,
                src 10.221.0.6,
                src 10.221.0.7,
                src 10.221.0.8,
                -);
    ipc[0] -> p0 :: Pipeliner -> [0]output;
    ipc[1] -> p1 :: Pipeliner -> [1]output;
    ipc[2] -> p2 :: Pipeliner -> [2]output;
    ipc[3] -> p3 :: Pipeliner -> [3]output;
    ipc[4] -> Print(ERROR) -> Discard;
    StaticThreadSched(p0 0);
    StaticThreadSched(p1 1);
    StaticThreadSched(p2 2);
    StaticThreadSched(p3 3);
} => [0-3]lb[1]

//-> SpinlockAcquire(natlock) -> [0]nat[1] SpinlockRelease(natlock)

%nat:file@dut B_FAST_NAT
-> Pipeliner -> [0]nat[1]
//-> SpinlockAcquire(natlock) -> [0]nat[1] SpinlockRelease(natlock)


%stats:file@dut B_FAST_STATS
-> SetTimestamp(PER_BATCH true)
 -> CPUSwitch[0-3] => [0-3] {
     [0] -> AggregateIPFlows -> [0];
     [1] -> AggregateIPFlows -> [0];
     [2] -> AggregateIPFlows -> [0];
     [3] -> AggregateIPFlows -> [0];
 }
//-> SpinlockAcquire(aglockB) -> AggregateIPFlows -> SpinlockRelease(aglockB)

%-nat:file@dut B_FAST_NAT

%file@dut B_FAST_END
-> r1;

Script(TYPE ACTIVE,
    label d,
    read disp/p0.count,
    read disp/p1.count,
    read disp/p2.count,
    read disp/p3.count,
    wait 1s,
    goto d
);

aglockA :: SpinlockInfo(aglockA)
aglockB :: SpinlockInfo(aglockB)
natlock :: SpinlockInfo(natlock)
