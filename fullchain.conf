
# Testie configuraton
#####################
%info
40G Chain supporting various tests

The DUT needs two 40G interfaces, one facing WAN and the other LAN.

%config
timeout=120
leaveopen:timeout=-1
var_names={LENGTH:Length,result-THROUGHPUT:HTTP Throughput,TXCPU:Transmit CPU,RXCPU:Receive CPU,CPUFREQ:CPU frequency (MHz),C:Concurrent connections,BUILDER:Reconstruct batches of Flows,result-LATENCY:Average file download time,LAT99:1% tail latency of file donwload time,result-Receive rate:Receive rate,FSIZE:File size,NC:Number of cores,result-REQUEST:Requests rate (req/sec),CPU:Number of cores,serie: ,result-Perf:Percentage of CPU time spent,Perf:Function class,version: ,result-LINK:Throughput,GEN_RATE:Target request generation rate (req/sec)}
n_retry=0
acceptable=0.01
n_runs=3
accept_zero={DROPPED}
nolat:accept_zero+={LATENCY,LAT99}
tunemiddle:n_runs=1

var_serie=LENGTH
-cpu:var_log={FSIZE,result-LATENCY,LAT99,result-Receive rate,time,GEN_RATE,REQUEST}
//-cpu:var_log_base={result-THROUGHPUT:10}
var_unit={result: ,result-LATENCY:ms,LAT99:ms,FSIZE:kByte,result-THROUGHPUT:Gbits/s,result-LINK:Gbits/s,result-PPS:KPackets/s,REQUEST:Request/s,Perf:%,CPUFREQ:MHz}
var_divider={result-THROUGHPUT:125000000,result-LINK:1000000000,result-LATENCY:0.001,LAT99:0.001,result-PPS:1000,CPUFREQ:1000} //Throughput is brought back to bits
var_format={result:%d,result-LATENCY:%d,LAT99:%d}
var_format+={result-CDFLAT:%.1f}
var_grid={result-LATENCY,result-THROUGHPUT,CDFLAT,REQUEST,LAT99}
var_lim={result-PPS:0-1000,THROUGHPUT:0-40,LINK:0-40,result-REQUEST:0-1000000}
var_lim+={CDFLAT:0-1}
var_ticks={THROUGHPUT:0+5+10+15+20+25+30+35+40,CPU:1+2+3+4}
graph_lines={-}

//graph_result_as_variables={LINK+THROUGHPUT:Receive rate}
//graph_variable_as_series={Receive rate}
//graph_combine_results={LINK+THROUGHPUT:Link rate+Payload rate}
cpu:graph_subplot_result={THROUGHPUT+REQUEST:rate}
duallat:graph_subplot_result={THROUGHPUT+LATENCY:2}
duallat:graph_subplot_type=axis
perf:var_serie=Perf
perf:graph_series_as_variables=True
perf:graph_result_as_variable={PERF-(.*):Perf}
perf,motivation:graph_series_sort={5,6,0,9,1,2,3,4,8,7,10,11}
perf:graph_max_series=15
perf:graph_bar_stack=True
perf:graph_x_sort={serie:0}
perf,motivation:graph_color={4,4,2,2,1,1,1,1,5,5,5,5}
perf:graph_legend_ncol=4
perf:legend_loc=outer center
perf:legend_bbox={0,1,1,.18}

-perf:results_expect={THROUGHPUT,LINK}

//Paper design
motivation:var_lim+={THROUGHPUT:0-25,result-REQUEST:4000-500000}
motivation:var_ticks+={THROUGHPUT:0+5+10+15+20,REQUEST:5000+10000+50000+1000000+200000}
motivation:var_log+={REQUEST}
motivation:graph_show_values={1,0}

evaluation,-schain:var_lim+={THROUGHPUT:0-100}
evaluation,-schain:var_ticks+={THROUGHPUT:0+20+40+60}



var_names+={CDFLAT:CDF,time:Latency (Âµs)}
var_repeat={CDFLAT}
time_precision=1
time_sync=0
result_add=0
graph_error={CDFLAT:none}
schain,wrkrate:graph_markers={ }
accept_zero={time,CDFLAT}
graph_y_group={time:first}
schain:var_lim+={THROUGHPUT:0-45}
schain:graph_color={8,4,4,1,1,3,3,5,5,5,5,7}


wrkrate:var_lim+={result-REQUEST:8000-2048000}

%variables
middleclick,fulllb|middleclick,nat:LBSTATE=0
FSIZE=[0*262144]
//FSIZE=[0*1048576]
//FSIZE=[0*65536]
CPU=1
cpu:CPU=[1-4]
CPUFREQ=
cpufreq:CPUFREQ=1200000
allcpufreq:CPUFREQ=[1000000-3700000#200000]

KEEPALIVE=0

GEN_CONCURRENT=128
tune:GEN_CONCURRENT={128,256,512,1024}

middleclick:ALL=true
middleclick:TCPCHECKSUM=false //Done by hardware
middleclick,hw:HARDWARE=1
middleclick,-aggcache:AGGCACHE=0
middleclick,aggcache:AGGCACHE=1
middleclick:CACHESIZE=65536
//tunemiddle:AGGCACHE={0,1} //Now a tag
//tunemiddle:CACHESIZE={1024,32768,65536}
//tunemiddle:BUILDER={0,1} //Now a tag
tunemiddle:FSIZE={8,32,1024}
middleclick,session:MIDDLECLICK_BEFORE_STAT+=-> FlowDispatcher(9/06 12/0/ffffffff 16/0/ffffffff 20/0/ffff 22/0/ffff)
middleclick,tcpstate:MIDDLECLICK_BEFORE_UP+=-> tcpstatein_up :: TCPStateIN(RETURNNAME tcpstatein_down)
middleclick,tcpstate:MIDDLECLICK_AFTERNAT_DOWN+=-> tcpstatein_down :: TCPStateIN(RETURNNAME tcpstatein_up)

haproxy:MAXCONN=200000
haproxy:BALANCE=static-rr
haproxy:SOMAXCONN=200000
haproxy:SYNBACKLOG=200000
tunehaproxy:MAXCONN={1024,32768,200000,4000000}
tunehaproxy:SOMAXCONN={200000,400000}
tunehaproxy:BALANCE={roundrobin,static-rr}
tunehaproxy:FSIZE={8,32,1024}


wrkrate:GEN_RATE=[8000*1024000]
//wrkrate:GEN_RATE=1024000
wrkrate:FSIZE=8

FNT=FWD
nat:FNT=NAT
haproxy|lb:FNT=LB
haproxy,nat|lb,nat:FNT=NAT+LB
snort|ids:FNT=IPS

//-nat:NAT=FORWARD
//nat:NAT=LINUX
//nat,mos:NAT=MOS
//nat,middleclick:NAT=MIDDLECLICK
//ids,middleclick:IDS=MIDDLECLICK
//snort:IDS=SNORT

//wm:WMPOS={1000:First packet,1400:Inter-packet,2000:Second packet}
wm:WMPOS={1400:Inter-packet}
-wm:WMPOS={-1:None}

perf:PERF=1
perf:PERF_STACK_MAX=3
perf:PERF_CLASS_MAP=../libs/perf/kernel.map ../libs/perf/kernel_flow.map ../libs/perf/fastclick.map ../libs/perf/middleclick.map
perf:PERF_MIN=0.1
perf:PERF_OPT=--cpu 0

%late_variables
GEN_THREADS=16
FILE_PATH=EXPAND(bin-${FSIZE}K)
HTTP_PORT=80
GEN_TIME=20
inreorder=false
crc|ids|http:inreorder=true
NGINX_ROOT=/tmp/nginx/
NGINX_PORT=80
perf:GEN_TIME=20
perf:PERF_CPU?=EXPAND( $CPU )
perf:PERF_OPT?=EXPAND( --cpu 0-$(( $PERF_CPU - 1 )) )
perf:PERF_TIME=10
PERF_MIN=0.05
MIDDLECLICKTCP=
MIDDLECLICKTCPUP=
MIDDLECLICKTCPDOWN=
ids,middleclick:MIDDLECLICKTCP= -> WordMatcher(WORD attack)
middleclick,tnat:MIDDLECLICKTCPUP+= -> nat::FlowIPNAT(SIP $SIP1)
middleclick,tnat:MIDDLECLICKTCPDOWN+= -> nat::FlowIPNATReverse(up/nat)
middleclick,fc:MIDDLECLICKTCPUP+= -> fc::FlowCounter()
middleclick,fc:MIDDLECLICKTCPDOWN+= -> fc::FlowCounter()
middleclick,crc:MIDDLECLICKTCPUP+= -> fcrc::FlowCRC()
middleclick,crc:MIDDLECLICKTCPDOWN+= -> fcrc::FlowCRC()


WRK_HOST=10.221.0.5
haproxy|nginxlb|fulllb:WRK_HOST=10.220.0.1

pipeline:HACPUOFFSET=1
pipeline:SNORTCPUOFFSET=2
pipeline:SQUIDCPUOFFSET=3


//ids,middleclick:MIDDLECLICKTCP= -> FlowIDSMatcher(attack, STALL false)

//*********DUT*************
%late_variables
N=EXPAND( $(( $CPU )) )

%-dpdk,-mos,-nobind:import@dut dpdk-bind DRIVER=i40e NIC=0
%-dpdk,-mos,-nobind:import@dut dpdk-bind DRIVER=i40e NIC=1
%-dpdk,-mos:import@dut dev_channels NIC=0 delay=1
%-dpdk,-mos:import@dut dev_channels NIC=1 delay=1
%-dpdk,-mos:import@dut dev_irq_affinity NIC=0 delay=2
%-dpdk,-mos:import@dut dev_irq_affinity NIC=1 delay=2
%dpdk,-nobind:import@dut dpdk-bind NIC=0
%dpdk,-nobind:import@dut dpdk-bind NIC=1
%import@client dev_rate NIC=0 delay=5
%import@dut cpufreq-script
%perf:import@dut perf-class delay=25

//Just set the IPS, for all mode
%script@dut 0:ip=10.220.0.1 1:ip=10.221.0.1 autokill=false name=setips

%-dpdk,-mos:script@dut sudo=true autokill=false name=flushconntrack
conntrack -F
iptables -P INPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -P OUTPUT ACCEPT
iptables -t filter -F
iptables -t raw -F
iptables -t nat -F
iptables -t mangle -F
conntrack -F
rmmod iptable_nat nf_nat_ipv4 xt_REDIRECT nf_nat_redirect xt_nat nf_nat nf_conntrack_ipv4

ethtool -L ${self:0:ifname} combined $CPU
ethtool -L ${self:1:ifname} combined $CPU

echo 1 > /proc/sys/net/ipv4/ip_forward

ifconfig ${self:0:ifname} ${self:0:ip} netmask 255.255.255.0
ifconfig ${self:0:ifname} up
ifconfig ${self:1:ifname} ${self:1:ip} netmask 255.255.255.0
ifconfig ${self:1:ifname} up

sudo arp -s 10.221.0.5 ${server:0:mac}
exit 0

%-fastclick,-click,nat,-mos:script@dut sudo=true delay=2 autokill=false name=LinuxNAT
iptables -t nat -A POSTROUTING -o ${dut:1:ifname} -j SNAT --to ${dut:1:ip}
exit $?

%-fastclick,-click,forward:script@dut sudo=true delay=1 autokill=false name=removeconntrack
iptables -t raw -I OUTPUT -j NOTRACK
iptables -t raw -I PREROUTING -j NOTRACK
conntrack -F
rmmod iptable_nat nf_nat_ipv4 xt_REDIRECT nf_nat_redirect xt_nat nf_nat nf_conntrack_ipv4

exit 0

//***********CLIENT***************
%-nobind:import@client dpdk-bind DRIVER=i40e NIC=0 0:ip=10.220.0.5
%-mos,-direct:script@client sudo=true delay=2 name=clientsetup autokill=false 0:ip=10.220.0.5
INETH=${client:0:ifname}
ifconfig $INETH down
ifconfig $INETH ${client:0:ip} netmask 255.255.255.0
ifconfig $INETH up
ip route add 10.221.0.0/24 via 10.220.0.1
//sudo arp -s 10.221.0.5 ${server:0:mac}
//sudo iptables -P INPUT ACCEPT
exit 0

%-mos,direct:script@client sudo=true delay=2 name=clientsetup autokill=false
INETH=${client:0:ifname}
sudo ifconfig $INETH 10.221.0.50 netmask 255.255.255.0
sudo ifconfig $INETH up
exit 0

%script@server sudo=true autokill=false name=waitcon
echo "Waiting for connections on server..."
bash waitcon.sh

%file@server waitcon.sh
killall nginx
sleep 1
killall -9 nginx
sleep 1
l=$(netstat -n | grep TIME_WAIT | wc -l)
while [ $l -gt 100 ] ; do
    echo "Waiting for less connections (have $l)..."
    sleep 1
    cleaned=$(netstat -n | grep 10.221 | grep TIME_WAIT | awk '{print $4"\t"$5}' | tee /proc/net/tcpdropsock | wc -l)
    echo "Cleaned $cleaned !"
    l=$(netstat -n | grep TIME_WAIT | wc -l)
done
echo "EVENT SERVER_CLEAN"
exit 0

%-leaveopen,wrkrate:import@client wrk2 HTTP_PORT=80 delay=8 waitfor=NGINX_LAUNCHED
%-wrkrate,-leaveopen:script@client sudo=true delay=8 name=wrk deps=wrk-tbarbette waitfor=NGINX_LAUNCHED
echo "Launching WRK"
export PATH=../build/wrk/:$PATH
bash wrk.sh

%file@client wrk.sh
#When using link, this must be avoided
wrk -c $GEN_CONCURRENT -t $GEN_THREADS -r -d2s http://${WRK_HOST}:${HTTP_PORT}/${FILE_PATH}
echo "Launching WRK"
wrk -c $GEN_CONCURRENT -t $GEN_THREADS -r -d${GEN_TIME}s http://${WRK_HOST}:${HTTP_PORT}/${FILE_PATH} | tee wrk_results
r=$?
cat wrk_results | grep "Transfer/sec" | awk '{printf "RESULT-THROUGHPUT %s\n", $2}'
cat wrk_results | grep "Requests/sec" | awk '{printf "RESULT-REQUEST %s\n", $2}'
cat wrk_results | grep "Latency" | awk '{printf "RESULT-LATENCY %s\n", $2}'
rm wrk_results
exit $r

//************SERVER***************

%epserver:import@server mos-bind
%epserver:script@server sudo=true
killall nginx
ifconfig ${self:0:ifname} 10.221.0.5 netmask 255.255.0.0
ip route add 10.220.0.0/16 dev ${self:0:ifname}
arp -s ${dut:1:ip} ${dut:1:mac}
arp -s ${client:0:ip} ${dut:1:mac}
cd /home/tom/nas/mOS-networking-stack/
cd samples/epserver
./epserver

%-nobind,-epserver:import@server dpdk-bind DRIVER=i40e NIC=0
%-epserver:script@server 0:ip=10.221.0.5 sudo=true autokill=false
ifconfig ${server:0:ifname} ${server:0:ip} netmask 255.255.255.0
ip route add 10.220.0.0/24 via 10.221.0.1
iptables -I INPUT -i ${server:0:ifname} -j ACCEPT
//For LB
ip addr add 10.221.0.6 dev ${self:0:ifname}
ip addr add 10.221.0.7 dev ${self:0:ifname}
ip addr add 10.221.0.8 dev ${self:0:ifname}
ip addr add 10.221.0.9 dev ${self:0:ifname}
exit 0

%-epserver,-iperf:import@server nginx waitfor=SERVER_CLEAN

%script@server autokill=false critical=1
mkdir -p ${NGINX_ROOT}
dd if=/dev/urandom of=${NGINX_ROOT}/bin-${FSIZE}K bs=1K count=$FSIZE

%wm:script@server autokill=false delay=1
echo ATTACK | dd if=/dev/stdin of=${NGINX_ROOT}/bin-${FSIZE}K bs=1 seek=$WMPOS conv=notrunc
cat ${NGINX_ROOT}/bin-${FSIZE}K | grep ATTACK

//********Config files**********
%include fullchain.d/mos.conf
%include fullchain.d/clicknf.conf
%include fullchain.d/snort.conf
%include fullchain.d/squid.conf
%include fullchain.d/middleclick.conf
%include fullchain.d/fastclick.conf
%include fullchain.d/click.conf
%include fullchain.d/nginx.conf
%include fullchain.d/haproxy.conf

%file@dut CLICK_CONF
define($MAC1 ${dut:0:mac})
define($MAC2 ${dut:1:mac})
define($NET1 10.220.0.0/16)
define($NET2 10.221.0.0/16)
define($IP1 ${dut:0:ip})
define($IP2 ${dut:1:ip})
define($NATIP 10.221.0.2)

define($SERVERIP1 10.221.0.6)
define($SERVERIP2 10.221.0.7)
define($SERVERIP3 10.221.0.8)
define($SERVERIP4 10.221.0.9)


define($SIP1 10.221.0.1)
define($SIP2 10.221.0.2)
define($SIP3 10.221.0.3)
define($SIP4 10.221.0.4)

//Parameters
define($rxverbose 99)
define($txverbose 99)
define($bout 32)
define($ignore 0)

Script(TYPE ACTIVE,
        label loop,
        read info.pool_count,
        wait 1s,
        goto loop)

%file@dut DPDK_CONF
info :: DPDKInfo(1000000)


//#############################
%haproxy|nginxlb:init@dut sudo=true
sudo sysctl -w net.core.somaxconn=$SOMAXCONN
sudo sysctl -w net.ipv4.tcp_max_syn_backlog=$SYNBACKLOG

sudo service fail2ban stop

sudo killall -9 haproxy &> /dev/null
sudo killall -9 nginx &> /dev/null

RXQUEUE=$NC
ethA=${dut:0:ifname}
ethB=${dut:1:ifname}

echo 1 > /proc/sys/net/ipv4/ip_forward
sleep 1

//sudo ip addr add 10.100.1.2/24 dev $ethB
//sudo ip addr add 10.100.2.2/24 dev $ethB
//sudo ip addr add 10.100.3.2/24 dev $ethB
//sudo ip addr add 10.100.4.2/24 dev $ethB
//sudo ip addr add 10.100.5.2/24 dev $ethB
//sudo ip addr add 10.100.6.2/24 dev $ethB
//sudo ip addr add 10.100.7.2/24 dev $ethB
//sudo ip addr add 10.100.8.2/24 dev $ethB
