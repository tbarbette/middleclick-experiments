%late_variables
GDB=
gdb:GDB=gdb -ex "run" -ex "signal 2" -ex "bt" -batch -args 

%middleclick:script@dut sudo=true critical=false title=MiddleClickOnDUT

cat CLICK_CONF CONFIG > C
$GDB click --dpdk -n 6 -l 0-$(( $CPU - 1 )) -- C 
exit 0

%variables
middleclick:ARPELEM=ARPQuerier
//nat,middleclick|tcp,middleclick|lb,middleclick|tcpstate,middleclick:ARPELEM=FlowARPQuerier
RECLASS=0
reclass:RECLASS=1

TCP=0
tcp:TCP=1

%late_variables
ETHEROUT=MyNull
SETTS=false
tsdiff:ETHEROUT=TimestampAccum
tsdiff:SETTS=true
-builder,-hw:FLOWELEMENT=FlowManager(BUILDER 0,
builder,-hw:FLOWELEMENT=FlowManager(BUILDER 1,
hw:FLOWELEMENT=FlowDPDKManager( DEVICE f,
hw,aggcache:FLOWELEMENT=FlowDPDKCacheManager( DEVICE f,
hw,builder:FLOWELEMENT=FlowDPDKBuilderManager( DEVICE f,

%file@dut CONFIG
TSCClock(PRECISION 1000, SYNCHRONIZE 5);
JiffieClock(MINPRECISION 1000);

elementclass ARPDispatcher {
        input[0]->
		iparp :: FlowDispatcher(
                        12/0800,
                        12/0806,
                        -)
		iparp[0] -> [0]output
		iparp[1] -> arptype ::FlowDispatcher(20/0001, 20/0002, -)
		iparp[2] -> [3]output

		arptype[0] -> [1]output
		arptype[1] -> [2]output
		arptype[2] -> [3]output
}

tab :: ARPTable

elementclass MyNull {
    [0] -> [0]
}

elementclass Receiver { $port, $mac, $ip, $range |

    input[0]
$((  "  -> Strip(14) " if $RECLASS else "" ))
    -> arpq :: $ARPELEM($ip, $mac, TABLE tab)
    -> etherOUT :: $ETHEROUT

    f :: FromDPDKDevice($port, VERBOSE 99, PROMISC false, RSS_AGGREGATE $AGGCACHE, THREADOFFSET 0, MAXTHREADS $CPU, TIMESTAMP $SETTS)
    -> SetTimestamp
    -> fc :: $FLOWELEMENT AGGCACHE $AGGCACHE, CACHESIZE $CACHESIZE, VERBOSE 1, VERBOSE_FCB 1, EARLYDROP true)
    -> arpr :: ARPDispatcher()

    arpr[0]
    -> FlowStrip(14)
    -> receivercheck :: CheckIPHeader(CHECKSUM false)
    -> inc :: FlowDispatcher(9/01 1, 9/06 0, -)


    inc[0] //TCP
    -> [0]output;

    inc[1]
    -> [1]output;


    inc[2]
    -> IPPrint("UNKNOWN IP")
    -> Unstrip(14)
	-> Discard

    arpr[1]
    -> Print("RX ARP Request $mac", -1)
    -> arpRespIN :: ARPResponder($range $mac)
    -> Print("TX ARP Responding", -1)
    -> etherOUT;

    arpRespIN[1] -> Print("ARP Packet not for $mac", -1) -> Discard

    arpr[2]
    -> Print("RX ARP Response $mac", -1)
    -> [1]arpq;

    arpr[3] -> Print("Unknown packet type IN???",-1) -> Discard();


    etherOUT
    -> t :: ToDPDKDevice($port,BLOCKING true, ALLOC true, VERBOSE 99, TCO true)
}

r1 :: Receiver(${dut:0:pci},$MAC1,$IP1,$IP1);
r2 :: Receiver(${dut:1:pci},$MAC2,$IP2,10.221.0.1/29);

r1[1] -> Print("ICMP") -> r2;
r2[1] -> Print("ICMP") -> r1;
//Idle -> host :: Null;

elementclass FNT {
    input[0] 
$(("        -> fc0 :: $FLOWELEMENT AGGCACHE $AGGCACHE, CACHESIZE $CACHESIZE, VERBOSE 1, VERBOSE_FCB 1, EARLYDROP true) -> FlowStrip(14)" if $RECLASS else "" ))
        $(( "-> t0 :: TCPStateIN(RETURNNAME t1)" if $TCP and $RECLASS else ("-> FlowDispatcher(12/0/ffffffff:HASH-3, 16/0/ffffffff:HASH-3, 20/0/ffffffff:HASH-3)" if not $TCP else "") ))
        -> FlowCounter
$(("      -> FlowUnstrip(14)  -> FlowStack " if $RECLASS else ""))
        -> [0]output;

    input[1] 
$(("        -> fc1 :: $FLOWELEMENT AGGCACHE $AGGCACHE, CACHESIZE $CACHESIZE, VERBOSE 1, VERBOSE_FCB 1, EARLYDROP true) -> FlowStrip(14)" if $RECLASS else "" ))
        
 $((        "-> t1 :: TCPStateIN(RETURNNAME t0)" if $TCP and $RECLASS else (" -> FlowDispatcher(12/0/ffffffff:HASH-3, 16/0/ffffffff:HASH-3, 20/0/ffffffff:HASH-3)" if not $TCP else "") ))
        -> FlowCounter

$(("      -> FlowUnstrip(14)  -> FlowStack " if $RECLASS else ""))
        -> [1]output;
}

r1

$(("        -> FlowUnstrip(14) -> FlowStack " if $RECLASS else ""))
        $(( "-> t0 :: TCPStateIN(RETURNNAME t1)" if $TCP and not $RECLASS and $NB_NF > 0 else ""  ))
    $(( "\n".join([ "-> fnt%d :: FNT()" % i for i in range($NB_NF) ]) ))
    -> r2

r2

$(("        -> FlowUnstrip(14) -> FlowStack " if $RECLASS else ""))
        $(( "-> t1 :: TCPStateIN(RETURNNAME t0)" if $TCP and not $RECLASS and $NB_NF > 0 else ""  ))
    $(( "\n".join([ "-> [1] fnt%d [1]" % i for i in range($NB_NF) ])  ))
 -> r1;



//#############################
Script(TYPE ACTIVE,
                print "Waiting for link initialization...",
                wait 2s,
                print "Ready")

DriverManager(
                pause,
                print "Server finished. Waiting for last packets...",
                wait $(wait),
                print "Rate : ",
                print "$(r1/avgIN.link_rate)",
                print "$(r2/avgIN.link_rate)",
                print "Count :",
                print "$(r1/avgIN.count)/$(r1/f.count)",
                print "$(r2/avgIN.count)/$(r2/f.count)",
                print "Dropped : ",
                print "$(r1/f.dropped) $(r1/t.dropped)",
                print "$(r2/f.dropped) $(r2/t.dropped)",
                print "$(r1/arpq.drops) $(r2/arpq.drops)",
                print "$(r1/stats.average) $(r1/stats.median)",
                print "$(r2/stats.average) $(r2/stats.median)",
                print "RESULT-AVGLAT $(r2/etherOUT.average_time)",
                stop);
