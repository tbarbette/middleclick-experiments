#####################
# Testie configuraton
#####################
%info
40G Chain supporting various tests

The DUT needs two 40G interfaces, one facing WAN and the other LAN.

%config
timeout=90
leaveopen:timeout=-1
var_names={LENGTH:Length,result-THROUGHPUT:HTTP Throughput,TXCPU:Transmit CPU,RXCPU:Receive CPU,CPUFREQ:CPU frequency (MHz),C:Concurrent connections,BUILDER:Reconstruct batches of Flows,result-LATENCY:Average file download time,result-Receive rate:Receive rate,FSIZE:File size,NC:Number of cores,result-REQUEST:Requests rate,CPU:Number of cores,serie: ,result-Perf:Percentage of CPU time spent,Perf:Function class,version: ,result-LINK:Throughput}
n_retry=0
acceptable=0.01
n_runs=3
accept_zero={DROPPED}
nolat:accept_zero+={LATENCY}
tunemiddle:n_runs=1
var_serie=LENGTH
perf:var_serie=Perf
perf:graph_series_as_variables=True
-cpu:var_log={FSIZE,result-LATENCY,result-Receive rate}
//-cpu:var_log_base={result-THROUGHPUT:10}
var_unit={result: ,result-LATENCY:ms,FSIZE:kbyte,result-THROUGHPUT:Gbits/s,result-LINK:Gbits/s,result-PPS:KPackets/s,REQUEST:Request/s,Perf:%,CPUFREQ:MHz}
var_divider={result-THROUGHPUT:125000000,result-LINK:1000000000,result-LATENCY:0.001,result-PPS:1000,CPUFREQ:1000} //Throughput is brought back to bits
var_format={result:%d,result-LATENCY:%d}
var_grid={result-LATENCY,result-THROUGHPUT}
var_lim={result-PPS:0-1000,THROUGHPUT:0-40,LINK:0-40,result-REQUEST:0-1000000}
var_ticks={THROUGHPUT:0+5+10+15+20+25+30+35+40,CPU:1+2+3+4}
//graph_result_as_variables={LINK+THROUGHPUT:Receive rate}
//graph_variable_as_series={Receive rate}
//graph_combine_results={LINK+THROUGHPUT:Link rate+Payload rate}
cpu:graph_subplot_result={THROUGHPUT+REQUEST:rate}
duallat:graph_subplot_result={THROUGHPUT+LATENCY:2}
duallat:graph_subplot_type=axis
perf:graph_result_as_variable={PERF-(.*):Perf}

-perf:results_expect={THROUGHPUT,LINK,REQUEST}

%variables
FSIZE=[0*262144]
//FSIZE=[0*1048576]
//FSIZE=[1*65536]
CPU=1
cpu:CPU=[1*8]
CPUFREQ=
cpufreq:CPUFREQ=1200000

GEN_CONCURRENT=128
tune:GEN_CONCURRENT={128,256,512,1024}

-nat:NAT=FORWARD
nat:NAT=LINUX
nat,mos:NAT=MOS
nat,middleclick:NAT=MIDDLECLICK
ids,middleclick:IDS=MIDDLECLICK
snort:IDS=SNORT

wm:WMPOS=1400

perf:PERF=1

%late_variables
GEN_THREADS=16
FILE_PATH=EXPAND(bin-${FSIZE}K)
HTTP_PORT=80
GEN_TIME=10
inreorder=false
crc,ids:inreorder=true
NGINX_ROOT=/tmp/nginx/
NGINX_PORT=80
perf:GEN_TIME=20
perf:PERF_OPT=EXPAND( --cpu 0-$(( $CPU - 1 )) )
PERF_MIN=0.1
squid:PERF_MIN=0.2
MIDDLECLICKTCP=
MIDDLECLICKTCPUP=
MIDDLECLICKTCPDOWN=
ids,middleclick:MIDDLECLICKTCP= -> WordMatcher(WORD attack)
middleclick,tnat:MIDDLECLICKTCPUP+= -> nat::FlowIPNAT(SIP 10.221.0.1)
middleclick,tnat:MIDDLECLICKTCPDOWN+= -> nat::FlowIPNATReverse(up/nat)
middleclick,fc:MIDDLECLICKTCPUP+= -> fc::FlowCounter()
middleclick,fc:MIDDLECLICKTCPDOWN+= -> fc::FlowCounter()
middleclick,crc:MIDDLECLICKTCPUP+= -> fcrc::FlowCRC()
middleclick,crc:MIDDLECLICKTCPDOWN+= -> fcrc::FlowCRC()

SNORTCPU=0
NSNORTCPU=EXPAND( $CPU )
pipeline:NSNORTCPU=1
-pipeline:SQUIDCPU=0
pipeline:SQUIDCPU=EXPAND( $(( 0 if $CPU == 1 else 1 )) )
pipeline:NSQUIDCPU=1
-pipeline:NSQUIDCPU=EXPAND( $CPU )


//ids,middleclick:MIDDLECLICKTCP= -> FlowIDSMatcher(attack, STALL false)

//*********DUT*************
%-dpdk,-mos:import@dut dpdk-bind DRIVER=i40e NIC=0
%-dpdk,-mos:import@dut dpdk-bind DRIVER=i40e NIC=1
%-dpdk,-mos:import@dut dev_channels N=1 NIC=0 delay=1
%-dpdk,-mos:import@dut dev_channels N=1 NIC=1 delay=1
%-dpdk,-mos:import@dut dev_irq_affinity NIC=0 delay=2
%-dpdk,-mos:import@dut dev_irq_affinity NIC=1 delay=2
%dpdk:import@dut dpdk-bind NIC=0
%dpdk:import@dut dpdk-bind NIC=1
%import@client dev_rate NIC=0 delay=5
%import@dut cpufreq-script
%perf:import@dut perf-functions delay=10

//Just set the IPS, for all mode
%script@dut 0:ip=10.220.0.1 1:ip=10.221.0.1 autokill=false

%-dpdk,-mos:script@dut sudo=true autokill=false
conntrack -F
iptables -t filter -F
iptables -t raw -F
iptables -t nat -F
iptables -t mangle -F
conntrack -F
rmmod iptable_nat nf_nat_ipv4 xt_REDIRECT nf_nat_redirect xt_nat nf_nat nf_conntrack_ipv4

ethtool -L ${self:0:ifname} combined $CPU
ethtool -L ${self:1:ifname} combined $CPU

./set_irq_affinity.sh 0 ${self:0:ifname}
./set_irq_affinity.sh 0 ${self:1:ifname}

echo 1 > /proc/sys/net/ipv4/ip_forward

ifconfig ${self:0:ifname} ${self:0:ip} netmask 255.255.255.0
ifconfig ${self:0:ifname} up
ifconfig ${self:1:ifname} ${self:1:ip} netmask 255.255.255.0
ifconfig ${self:1:ifname} up

sudo arp -s 10.221.0.5 ${server:0:mac}
exit 0

%-fastclick,-click,nat,-dpdk,-mos:script@dut sudo=true delay=2 autokill=false name=LinuxNAT
iptables -t nat -A POSTROUTING -o ${dut:1:ifname} -j SNAT --to ${dut:1:ip}
exit $?

%-fastclick,-click,forward:script@dut sudo=true delay=1 autokill=false
iptables -t raw -I OUTPUT -j NOTRACK
iptables -t raw -I PREROUTING -j NOTRACK
conntrack -F
rmmod iptable_nat nf_nat_ipv4 xt_REDIRECT nf_nat_redirect xt_nat nf_nat nf_conntrack_ipv4

exit 0

//***********CLIENT***************
%import@client dpdk-bind DRIVER=i40e NIC=0 0:ip=10.220.0.5
%-mos,-direct:script@client sudo=true delay=2 name=clientsetup autokill=false
INETH=${client:0:ifname}
sudo ifconfig $INETH ${client:0:ip} netmask 255.255.255.0
sudo ifconfig $INETH up
ip route add 10.221.0.0/24 via 10.220.0.1
exit 0

%-mos,direct:script@client sudo=true delay=2 name=clientsetup autokill=false
INETH=${client:0:ifname}
sudo ifconfig $INETH 10.221.0.50 netmask 255.255.255.0
sudo ifconfig $INETH up
exit 0

%-leaveopen:script@client sudo=true delay=20 name=wrk
export PATH=../build/wrk/:$PATH
bash wrk.sh

%file@client wrk.sh
#When using link, this must be avoided
wrk -c $GEN_CONCURRENT -t $GEN_THREADS -d2s http://10.221.0.5:${HTTP_PORT}/${FILE_PATH}
echo "Launching WRK"
wrk -c $GEN_CONCURRENT -t $GEN_THREADS -d${GEN_TIME}s http://10.221.0.5:${HTTP_PORT}/${FILE_PATH} | tee wrk_results
r=$?
cat wrk_results | grep "Transfer/sec" | awk '{printf "RESULT-THROUGHPUT %s\n", $2}'
cat wrk_results | grep "Requests/sec" | awk '{printf "RESULT-REQUEST %s\n", $2}'
cat wrk_results | grep "Latency" | awk '{printf "RESULT-LATENCY %s\n", $2}'
rm wrk_results
exit $r

//************SERVER***************

%epserver:import@server mos-bind
%epserver:script@server sudo=true
killall nginx
ifconfig dpdk0 10.221.0.5 netmask 255.255.0.0
ip route add 10.220.0.0/16 dev dpdk0
arp -s ${dut:1:ip} ${dut:1:mac}
arp -s ${client:0:ip} ${dut:1:mac}
cd /home/tom/nas/mOS-networking-stack/
cd samples/epserver
./epserver

%-epserver:import@server dpdk-bind DRIVER=i40e NIC=0
%-epserver:script@server 0:ip=10.221.0.5 sudo=true autokill=false
ifconfig ${server:0:ifname} ${server:0:ip} netmask 255.255.255.0
ip route add 10.220.0.0/24 via 10.221.0.1
//For LB
ip addr add 10.221.0.6 dev dpdk0
ip addr add 10.221.0.7 dev dpdk0
ip addr add 10.221.0.8 dev dpdk0
ip addr add 10.221.0.9 dev dpdk0
exit 0

%-epserver:import@server nginx
%script@server autokill=false
mkdir -p ${NGINX_ROOT}
dd if=/dev/urandom of=${NGINX_ROOT}/bin-${FSIZE}K bs=1K count=$FSIZE

%wm:script@server autokill=false delay=1
echo ATTACK | dd if=/dev/stdin of=${NGINX_ROOT}/bin-${FSIZE}K bs=1 seek=$WMPOS conv=notrunc


//********Config files**********
%include fullchain.d/mos.conf
%include fullchain.d/snort.conf
%include fullchain.d/squid.conf
%include fullchain.d/middleclick.conf
%include fullchain.d/fastclick.conf
%include fullchain.d/click.conf

%file CLICK_CONF
define($MAC1 ${dut:0:mac})
define($MAC2 ${dut:1:mac})
define($NET1 10.220.0.0/16)
define($NET2 10.221.0.0/16)
define($IP1 ${dut:0:ip})
define($IP2 ${dut:1:ip})
define($NATIP 10.221.0.2)

define($SERVERIP1 10.221.0.6)
define($SERVERIP2 10.221.0.7)
define($SERVERIP3 10.221.0.8)
define($SERVERIP4 10.221.0.9)


define($SIP1 10.221.0.1)
define($SIP2 10.221.0.1)
define($SIP3 10.221.0.1)
define($SIP4 10.221.0.1)

//Parameters
define($rxverbose 99)
define($txverbose 99)
define($bout 32)
define($ignore 0)

Script(TYPE ACTIVE,
        label loop,
        read info.pool_count,
        wait 1s,
        goto loop)

%file DPDK_CONF
info :: DPDKInfo(1000000)
